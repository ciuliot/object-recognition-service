@page "{jobId}"
@model Digitalist.ObjectRecognition.Pages.TrainingJobDetailsPageModel
<!DOCTYPE html>
<html lang="en">
<head>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/aspnet-signalr/1.1.4/signalr.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
</head>

<body>
  <div style="width:75%;">
  <button onClick="showAll()">Show whole dataset</button>
  <button onClick="showLast()">Show last 100 values</button>
		<canvas id="chart"></canvas>
	</div>

  <script defer>
  let mode = 0;

  function showAll() {
    mode = 0;
  }

  function showLast() {
    mode = 100;
  }

    document.addEventListener('DOMContentLoaded', async () => {
      var connection = new signalR.HubConnectionBuilder().withUrl("/darknetHub").build();

      const dataTemplate = {
        datasets: [
            { 
              label: 'Loss',
              fill: false,
              borderColor: 'rgb(255, 99, 132)',
              yAxisID: 'Loss',
              data: []
            }, 
            {
              label: 'Avg. loss',
              borderColor: 'rgb(75, 192, 192)',
              backgroundColor: 'rgba(75, 192, 192, 0.5)',
              fill: true,
              yAxisID: 'Loss',
              data: []
            }, 
            {
              label: 'Learning rate',
              borderColor: 'blue',
              fill: false,
              yAxisID: 'Learning rate',
              data: []
            }],
            labels: []
      }
      
      const data = {
        datasets: [[], [], []],
        labels: []
      };

      const config = {
          type: 'line',
          options: {
            scales: {
              yAxes: [{
                id: 'Loss',
                type: 'linear',
                position: 'left',
              }, {
                id: 'Learning rate',
                type: 'linear',
                position: 'right',                
              }]
            }
          }
      }

      var chart = new Chart('chart', config);

      connection.on('updateReceived', (batchId, loss, avgLoss, learningRate, trainingStep) => {
        console.log('Update received', loss, avgLoss, learningRate);

        data.labels.push(batchId);

        data.datasets[0].push(loss);
        data.datasets[1].push(avgLoss);
        data.datasets[2].push(learningRate);

        config.data = {
            ...dataTemplate
          };

        if (mode > 0 && data.labels.length > mode) {
          config.data.labels = data.labels.slice(-mode);
          for(let i = 0; i < data.datasets.length; i++) {
            config.data.datasets[i].data = data.datasets[i].slice(-mode);
          }
        } else {          
          config.data.labels = data.labels;
          for(let i = 0; i < data.datasets.length; i++) {
            config.data.datasets[i].data = data.datasets[i];
          }
        }

        chart.update();
      });

      await connection.start();
      console.log("connected");      

      // ToDo: Request initial data

      await connection.send('Subscribe', jobId);
    });
  </script>
</body>
</html>